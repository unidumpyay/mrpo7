const fetch = require('node-fetch');
const core = require('@actions/core');
const github = require('@actions/github');

(async () => {
  try {
    const tokenId = process.env.BOOKSTACK_TOKEN_ID;
    const tokenSecret = process.env.BOOKSTACK_TOKEN_SECRET;
    const apiUrl = process.env.BOOKSTACK_API_URL;
    const bookId = 1; // ID —Ç–≤–æ–µ–π –∫–Ω–∏–≥–∏

    const context = github.context;
    const issue = context.payload.issue;
    const action = context.payload.action;

    if (!issue) {
      console.log('No issue found in context');
      return;
    }

    const title = issue.title;
    const body = issue.body || '';
    console.log(`‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ issue: "${title}" (${action})`);

    // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    const searchRes = await fetch(`${apiUrl}/pages?search=${encodeURIComponent(title)}`, {
      headers: {
        'Authorization': `Token ${tokenId}:${tokenSecret}`,
        'Content-Type': 'application/json'
      }
    });
    const searchData = await searchRes.json();
    const existingPage = searchData.data?.find(p => p.name === title);

    // üü¢ 1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (action === 'opened' && !existingPage) {
      console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
      const createRes = await fetch(`${apiUrl}/pages`, {
        method: 'POST',
        headers: {
          'Authorization': `Token ${tokenId}:${tokenSecret}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: title,
          html: `
            <h2>–ü—Ä–æ–±–ª–µ–º–∞</h2><p>${body}</p>
            <h2>–ü—Ä–∏—á–∏–Ω–∞</h2><p>‚Äî</p>
            <h2>–†–µ—à–µ–Ω–∏–µ</h2><p>‚Äî</p>
            <h2>–°—Å—ã–ª–∫–∏</h2><p><a href="${issue.html_url}">${issue.html_url}</a></p>
          `,
          book_id: bookId
        })
      });
      console.log('–°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', await createRes.json());
      return;
    }

    // üü° 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (action === 'edited' && existingPage) {
      console.log(`–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ID=${existingPage.id}`);
      const updateRes = await fetch(`${apiUrl}/pages/${existingPage.id}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Token ${tokenId}:${tokenSecret}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: title,
          html: `
            <h2>–ü—Ä–æ–±–ª–µ–º–∞</h2><p>${body}</p>
            <h2>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</h2><p>${new Date().toLocaleString()}</p>
            <h2>–°—Å—ã–ª–∫–∏</h2><p><a href="${issue.html_url}">${issue.html_url}</a></p>
          `
        })
      });
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–æ:', await updateRes.json());
      return;
    }

    // üî¥ 3. –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏ ‚Üí –ø–æ–º–µ—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (action === 'closed' && existingPage) {
      console.log(`–ü–æ–º–µ—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—É—é ID=${existingPage.id}`);
      const closeRes = await fetch(`${apiUrl}/pages/${existingPage.id}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Token ${tokenId}:${tokenSecret}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: `${title} (–ó–∞–∫—Ä—ã—Ç–æ)`,
          html: `
            <h2>–ü—Ä–æ–±–ª–µ–º–∞</h2><p>${body}</p>
            <h2>–°—Ç–∞—Ç—É—Å</h2><p>‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞ ${new Date().toLocaleString()}</p>
            <h2>–°—Å—ã–ª–∫–∏</h2><p><a href="${issue.html_url}">${issue.html_url}</a></p>
          `
        })
      });
      console.log('–ó–∞–∫—Ä—ã—Ç–∞:', await closeRes.json());
      return;
    }

    console.log('–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err);
  }
})();
